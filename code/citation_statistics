import os
import time
import requests
from PyPDF2 import PdfReader
from pdfminer.high_level import extract_text
from tqdm import tqdm
import re

# ========== 用户配置部分 ========== 
TARGET_PAPER_ID = "5d654faf14f6b5b04b0bed9f69d9867f74598241"  # 目标文章的ID，例如：DOI、arXiv ID 或 Semantic Scholar ID
DOWNLOAD_DIR = "./downloaded_papers"  # PDF文件下载目录
NO_ACCESS_FILE = "./no_access_papers.txt"  # 记录无法下载的文章
TARGET_KEYWORDS = ["Deep Residual Learning", "He, Kaiming", "ResNet"]  # 目标文章的关键词
SEMANTIC_SCHOLAR_API = "https://api.semanticscholar.org/graph/v1/paper"

# ========== 扩展的辅助函数 ========== 
def get_pdf_from_arxiv(title):
    """从 arXiv 获取 PDF 文件"""
    search_url = f"https://api.semanticscholar.org/graph/v1/paper/arxiv/{title}"
    try:
        response = requests.get(search_url)
        response.raise_for_status()
        arxiv_data = response.json()
        pdf_url = arxiv_data.get('openAccessPdf', {}).get('url')
        return pdf_url
    except Exception as e:
        print(f"[Error] 从 arXiv 获取 PDF 失败: {title}, 错误: {e}")
        return None

def get_pdf_from_doi(doi):
    """从 DOI 获取 PDF 文件，尝试访问相关出版商网站"""
    url = f"https://doi.org/{doi}"
    headers = {"Accept": "application/pdf"}  # 请求 PDF 格式
    try:
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        return response.url  # 返回实际的 PDF 文件 URL
    except Exception as e:
        print(f"[Error] 从 DOI 获取 PDF 失败: {doi}, 错误: {e}")
        return None

def get_pdf_from_researchgate(title):
    """从 ResearchGate 获取 PDF 文件"""
    search_url = f"https://www.researchgate.net/search?q={title}"
    try:
        response = requests.get(search_url)
        response.raise_for_status()
        # 假设 ResearchGate 返回一个包含 PDF 下载链接的页面
        # 可以通过解析 HTML 页面或其他方法获取 PDF 链接（此部分简化）
        return "https://www.researchgate.net/redirectToPdf"  # 示例返回
    except Exception as e:
        print(f"[Error] 从 ResearchGate 获取 PDF 失败: {title}, 错误: {e}")
        return None

def get_pdf_from_pubmed_central(pmcid):
    """从 PubMed Central 获取 PDF 文件"""
    url = f"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC{pmcid}/pdf/"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.url  # 返回 PDF 链接
    except Exception as e:
        print(f"[Error] 从 PubMed Central 获取 PDF 失败: {pmcid}, 错误: {e}")
        return None

def get_pdf_from_core(title):
    """从 CORE 获取 PDF 文件"""
    search_url = f"https://core.ac.uk/search?q={title}"
    try:
        response = requests.get(search_url)
        response.raise_for_status()
        # 假设 CORE 返回一个包含 PDF 下载链接的页面
        return "https://core.ac.uk/redirectToPdf"  # 示例返回
    except Exception as e:
        print(f"[Error] 从 CORE 获取 PDF 失败: {title}, 错误: {e}")
        return None

def get_pdf_from_ssrn(title):
    """从 SSRN 获取 PDF 文件"""
    search_url = f"https://www.ssrn.com/en/search/{title}"
    try:
        response = requests.get(search_url)
        response.raise_for_status()
        # 假设 SSRN 返回一个包含 PDF 下载链接的页面
        return "https://www.ssrn.com/redirectToPdf"  # 示例返回
    except Exception as e:
        print(f"[Error] 从 SSRN 获取 PDF 失败: {title}, 错误: {e}")
        return None

def download_pdfs(papers, download_dir):
    """下载引用文章的PDF文件，记录无法下载的文章"""
    os.makedirs(download_dir, exist_ok=True)
    no_access = []
    
    for paper in tqdm(papers, desc="下载PDF"):
        title = paper.get("citingPaper", {}).get("title", "Unknown_Title")
        pdf_info = paper.get("citingPaper", {}).get("openAccessPdf", {})
        
        if not pdf_info:
            print(f"[Warning] PDF信息为空: {title}")
            continue
        pdf_url = pdf_info.get("url")

        # 尝试从不同来源获取 PDF 链接
        if not pdf_url:
            print(f"[Info] 尝试从多个来源获取 PDF: {title}")
            # 假设文章可能有 DOI 或 arXiv ID
            doi = paper.get("citingPaper", {}).get("doi", "")
            if doi:
                pdf_url = get_pdf_from_doi(doi)
            if not pdf_url:
                pdf_url = get_pdf_from_arxiv(title)
            # 尝试从 ResearchGate 获取 PDF
            if not pdf_url:
                pdf_url = get_pdf_from_researchgate(title)
            # 尝试从 PubMed Central 获取 PDF（假设我们有 PMCID）
            pmcid = paper.get("citingPaper", {}).get("pmcid", "")
            if not pdf_url and pmcid:
                pdf_url = get_pdf_from_pubmed_central(pmcid)
            # 尝试从 CORE 获取 PDF
            if not pdf_url:
                pdf_url = get_pdf_from_core(title)
            # 尝试从 SSRN 获取 PDF
            if not pdf_url:
                pdf_url = get_pdf_from_ssrn(title)
        
        if not pdf_url:
            print(f"[Warning] 无PDF链接: {title}")
            no_access.append(title)
            continue

        file_name = f"{title.replace(' ', '_')[:50]}.pdf"
        file_path = os.path.join(download_dir, file_name)

        try:
            response = requests.get(pdf_url, stream=True, timeout=60)
            response.raise_for_status()
            with open(file_path, "wb") as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            print(f"[Success] 下载完成: {title}")
        except Exception as e:
            print(f"[Error] 无法下载: {title}, 错误: {e}")
            no_access.append(title)

    # 记录无法下载的文章
    with open(NO_ACCESS_FILE, "w") as f:
        for title in no_access:
            f.write(title + "\n")
    print(f"[Info] 无法下载的文章已记录在 {NO_ACCESS_FILE}")

# ========== 主程序 ========== 
if __name__ == "__main__":
    # 1. 获取引用文章列表
    citing_papers = get_citing_papers(TARGET_PAPER_ID)
    if not citing_papers:
        print("[Error] 未找到引用文献，程序退出。")
        exit()

    # 2. 批量下载PDF文件
    download_pdfs(citing_papers, DOWNLOAD_DIR)

    # 3. 提取引用上下文
    extract_references_from_pdf(DOWNLOAD_DIR, TARGET_KEYWORDS)
